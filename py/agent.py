import logging
import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
import os
from dataclasses import dataclass

import telebot
from telebot import types
from telebot.async_telebot import AsyncTeleBot
import threading
import time

from langchain_core.messages import HumanMessage, SystemMessage
from langchain_core.tools import tool
from langchain_openai import ChatOpenAI
from langgraph.graph import MessagesState
from langgraph.graph import START, StateGraph, END
from langgraph.prebuilt import ToolNode


import os
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('health_bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}


@dataclass
class UserHealthState:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: int
    
    # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    water_intake: float = 0.0
    steps_count: int = 0
    exercise_minutes: int = 0
    sleep_hours: float = 0.0
    
    # –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    stress_level: int = 5
    mood_score: int = 5
    meditation_minutes: int = 0
    social_interactions: int = 0
    
    # –†–∞–±–æ—á–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    work_hours: float = 0.0
    breaks_taken: int = 0
    tasks_completed: List[str] = None
    meetings_attended: int = 0
    
    # –ò—Å—Ç–æ—Ä–∏—è –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    daily_activities: List[Dict] = None
    achievements: List[str] = None
    challenges: List[str] = None
    
    def __post_init__(self):
        if self.tasks_completed is None:
            self.tasks_completed = []
        if self.daily_activities is None:
            self.daily_activities = []
        if self.achievements is None:
            self.achievements = []
        if self.challenges is None:
            self.challenges = []
    
    def add_activity(self, activity: str, category: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –¥–Ω–µ–≤–Ω–æ–π –∂—É—Ä–Ω–∞–ª"""
        self.daily_activities.append({
            "activity": activity,
            "category": category,
            "timestamp": datetime.now().isoformat()
        })
        logger.info(f"User {self.user_id}: Added activity - {activity}")
    
    def get_health_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –∑–¥–æ—Ä–æ–≤—å—é"""
        return {
            "physical": {
                "water_intake": self.water_intake,
                "steps_count": self.steps_count,
                "exercise_minutes": self.exercise_minutes,
                "sleep_hours": self.sleep_hours
            },
            "mental": {
                "stress_level": self.stress_level,
                "mood_score": self.mood_score,
                "meditation_minutes": self.meditation_minutes,
                "social_interactions": self.social_interactions
            },
            "work": {
                "work_hours": self.work_hours,
                "breaks_taken": self.breaks_taken,
                "tasks_completed": len(self.tasks_completed),
                "meetings_attended": self.meetings_attended
            }
        }
    
    def get_daily_summary_text(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        summary = self.get_health_summary()
        
        text = f"üìä *–í–∞—à–∞ —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
        
        # –§–∏–∑–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        text += f"üí™ *–§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ:*\n"
        text += f"üíß –í–æ–¥–∞: {summary['physical']['water_intake']}–ª\n"
        text += f"üë£ –®–∞–≥–∏: {summary['physical']['steps_count']}\n"
        text += f"üèÉ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {summary['physical']['exercise_minutes']} –º–∏–Ω\n"
        text += f"üò¥ –°–æ–Ω: {summary['physical']['sleep_hours']} —á\n\n"
        
        # –ú–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        text += f"üß† *–ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:*\n"
        text += f"üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {summary['mental']['mood_score']}/10\n"
        text += f"üò∞ –°—Ç—Ä–µ—Å—Å: {summary['mental']['stress_level']}/10\n"
        text += f"üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è: {summary['mental']['meditation_minutes']} –º–∏–Ω\n"
        text += f"üë• –°–æ—Ü. –∫–æ–Ω—Ç–∞–∫—Ç—ã: {summary['mental']['social_interactions']}\n\n"
        
        # –†–∞–±–æ—á–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        text += f"üíº *–†–∞–±–æ—Ç–∞:*\n"
        text += f"‚è∞ –†–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤: {summary['work']['work_hours']}\n"
        text += f"‚òï –ü–µ—Ä–µ—Ä—ã–≤–æ–≤: {summary['work']['breaks_taken']}\n"
        text += f"‚úÖ –ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {summary['work']['tasks_completed']}\n"
        text += f"ü§ù –í—Å—Ç—Ä–µ—á: {summary['work']['meetings_attended']}\n"
        
        return text


def get_user_state(user_id: int) -> UserHealthState:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = UserHealthState(user_id=user_id)
        logger.info(f"Created new user state for user {user_id}")
    return user_states[user_id]


# –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def create_user_tools(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_state = get_user_state(user_id)
    
    @tool
    def log_water_intake(amount: float) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –≤ –ª–∏—Ç—Ä–∞—Ö"""
        user_state.water_intake += amount
        user_state.add_activity(f"–í—ã–ø–∏–ª {amount}–ª –≤–æ–¥—ã", "physical")
        return f"–ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã: {amount}–ª. –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {user_state.water_intake}–ª"

    @tool
    def log_exercise(minutes: int, exercise_type: str) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        user_state.exercise_minutes += minutes
        user_state.add_activity(f"{exercise_type} - {minutes} –º–∏–Ω—É—Ç", "physical")
        return f"–ó–∞–ø–∏—Å–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {exercise_type} ({minutes} –º–∏–Ω). –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {user_state.exercise_minutes} –º–∏–Ω"

    @tool
    def log_steps(steps: int) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤"""
        user_state.steps_count += steps
        user_state.add_activity(f"–ü—Ä–æ—à–µ–ª {steps} —à–∞–≥–æ–≤", "physical")
        return f"–ó–∞–ø–∏—Å–∞–Ω–æ —à–∞–≥–æ–≤: {steps}. –í—Å–µ–≥–æ –∑–∞ –¥–µ–Ω—å: {user_state.steps_count}"

    @tool
    def log_sleep(hours: float) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞"""
        user_state.sleep_hours = hours
        user_state.add_activity(f"–°–ø–∞–ª {hours} —á–∞—Å–æ–≤", "physical")
        return f"–ó–∞–ø–∏—Å–∞–Ω —Å–æ–Ω: {hours} —á–∞—Å–æ–≤"

    @tool
    def update_mood(score: int) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è (1-10)"""
        user_state.mood_score = max(1, min(10, score))
        user_state.add_activity(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {score}/10", "mental")
        return f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {score}/10"

    @tool
    def update_stress(level: int) -> str:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (1-10)"""
        user_state.stress_level = max(1, min(10, level))
        user_state.add_activity(f"–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞: {level}/10", "mental")
        return f"–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: {level}/10"

    @tool
    def log_meditation(minutes: int) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏"""
        user_state.meditation_minutes += minutes
        user_state.add_activity(f"–ú–µ–¥–∏—Ç–∞—Ü–∏—è {minutes} –º–∏–Ω—É—Ç", "mental")
        return f"–ó–∞–ø–∏—Å–∞–Ω–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è: {minutes} –º–∏–Ω. –í—Å–µ–≥–æ: {user_state.meditation_minutes} –º–∏–Ω"

    @tool
    def log_social_interaction(description: str) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"""
        user_state.social_interactions += 1
        user_state.add_activity(f"–°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {description}", "mental")
        return f"–ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: {description}"

    @tool
    def log_work_hours(hours: float) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã"""
        user_state.work_hours += hours
        user_state.add_activity(f"–†–∞–±–æ—Ç–∞–ª {hours} —á–∞—Å–æ–≤", "work")
        return f"–ó–∞–ø–∏—Å–∞–Ω–æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤: {hours}. –í—Å–µ–≥–æ: {user_state.work_hours}"

    @tool
    def log_break(duration: int) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ä—ã–≤"""
        user_state.breaks_taken += 1
        user_state.add_activity(f"–ü–µ—Ä–µ—Ä—ã–≤ {duration} –º–∏–Ω—É—Ç", "work")
        return f"–ó–∞–ø–∏—Å–∞–Ω –ø–µ—Ä–µ—Ä—ã–≤: {duration} –º–∏–Ω. –í—Å–µ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤: {user_state.breaks_taken}"

    @tool
    def complete_task(task_name: str) -> str:
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        user_state.tasks_completed.append(task_name)
        user_state.add_activity(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞: {task_name}", "work")
        return f"–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task_name}. –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {len(user_state.tasks_completed)}"

    @tool
    def log_meeting(meeting_name: str, duration: int) -> str:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Å—Ç—Ä–µ—á–µ"""
        user_state.meetings_attended += 1
        user_state.add_activity(f"–í—Å—Ç—Ä–µ—á–∞: {meeting_name} ({duration} –º–∏–Ω)", "work")
        return f"–ó–∞–ø–∏—Å–∞–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞: {meeting_name} ({duration} –º–∏–Ω)"

    @tool
    def add_achievement(achievement: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–Ω—è"""
        user_state.achievements.append(achievement)
        user_state.add_activity(f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement}", "summary")
        return f"–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {achievement}"

    @tool
    def add_challenge(challenge: str) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—ã–∑–æ–≤/—Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–Ω—è"""
        user_state.challenges.append(challenge)
        user_state.add_activity(f"–í—ã–∑–æ–≤: {challenge}", "summary")
        return f"–î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤: {challenge}"

    return {
        'health_tools': [log_water_intake, log_exercise, log_steps, log_sleep],
        'mental_health_tools': [update_mood, update_stress, log_meditation, log_social_interaction],
        'schedule_tools': [log_work_hours, log_break, complete_task, log_meeting],
        'summary_tools': [add_achievement, add_challenge]
    }


# LLM
llm = ChatOpenAI(
    model="gpt-4.1-mini", 
    temperature=0.7, 
    streaming=False,
    api_key=OPENAI_API_KEY, 
    max_completion_tokens=1024
)


# –°–∏—Å—Ç–µ–º–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è Telegram)
ROUTER_SYSTEM_TEMPLATE = """
–í—ã –†–æ—É—Ç–µ—Ä –≤ Telegram –±–æ—Ç–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º.
–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É –∞–≥–µ–Ω—Ç—É –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:
1. health_agent - –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (–≤–æ–¥–∞, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —à–∞–≥–∏, —Å–æ–Ω)
2. mental_health_agent - –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å, –º–µ–¥–∏—Ç–∞—Ü–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã)
3. schedule_agent - –†–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (—Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã, –ø–µ—Ä–µ—Ä—ã–≤—ã, –∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏)
4. summary_agent - –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è (–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –≤—ã–∑–æ–≤—ã, –æ–±—â–∏–π –∞–Ω–∞–ª–∏–∑)

–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_request}
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {user_state}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –¥–ª—è Telegram —á–∞—Ç–∞.

–û—Ç–≤–µ—á–∞–π—Ç–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
  "next_agent": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∞–≥–µ–Ω—Ç–∞",
  "reasoning": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ",
  "message_to_agent": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"
}}
"""

HEALTH_AGENT_SYSTEM_TEMPLATE = """
–í—ã –ê–≥–µ–Ω—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –≤ Telegram –±–æ—Ç–µ.
–ü–æ–º–æ–≥–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- log_water_intake: –∑–∞–ø–∏—Å–∞—Ç—å –≤–æ–¥—É
- log_exercise: –∑–∞–ø–∏—Å–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è  
- log_steps: –∑–∞–ø–∏—Å–∞—Ç—å —à–∞–≥–∏
- log_sleep: –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω

–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
üíß –í–æ–¥–∞: {water_intake}–ª
üë£ –®–∞–≥–∏: {steps_count}
üèÉ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {exercise_minutes} –º–∏–Ω
üò¥ –°–æ–Ω: {sleep_hours} —á

–ó–∞–ø—Ä–æ—Å: {user_request}

–¶–µ–ª–∏ –¥–Ω—è: 2-3–ª –≤–æ–¥—ã, 10000+ —à–∞–≥–æ–≤, 30+ –º–∏–Ω —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, 7-9—á —Å–Ω–∞.

–ë—É–¥—å—Ç–µ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö.
"""

MENTAL_HEALTH_AGENT_SYSTEM_TEMPLATE = """
–í—ã –ê–≥–µ–Ω—Ç –º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è –≤ Telegram –±–æ—Ç–µ.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- update_mood: –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (1-10)
- update_stress: –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–µ—Å—Å (1-10)
- log_meditation: –∑–∞–ø–∏—Å–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é
- log_social_interaction: –∑–∞–ø–∏—Å–∞—Ç—å –æ–±—â–µ–Ω–∏–µ

–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {mood_score}/10
üò∞ –°—Ç—Ä–µ—Å—Å: {stress_level}/10  
üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è: {meditation_minutes} –º–∏–Ω
üë• –û–±—â–µ–Ω–∏–µ: {social_interactions}

–ó–∞–ø—Ä–æ—Å: {user_request}

–ë—É–¥—å—Ç–µ —ç–º–ø–∞—Ç–∏—á–Ω—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏. –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–ø–ª–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.
"""

SCHEDULE_AGENT_SYSTEM_TEMPLATE = """
–í—ã –ê–≥–µ–Ω—Ç —Ä–∞–±–æ—á–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Telegram –±–æ—Ç–µ.
–ü–æ–º–æ–≥–∞–µ—Ç–µ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- log_work_hours: –∑–∞–ø–∏—Å–∞—Ç—å —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã
- log_break: –∑–∞–ø–∏—Å–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤
- complete_task: –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É
- log_meeting: –∑–∞–ø–∏—Å–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É

–¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚è∞ –†–∞–±–æ—Ç–∞: {work_hours}—á
‚òï –ü–µ—Ä–µ—Ä—ã–≤—ã: {breaks_taken}
‚úÖ –ó–∞–¥–∞—á–∏: {tasks_completed}
ü§ù –í—Å—Ç—Ä–µ—á–∏: {meetings_attended}

–ó–∞–ø—Ä–æ—Å: {user_request}

–ü–æ–º–æ–≥–∞–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å work-life –±–∞–ª–∞–Ω—Å.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ–ª–æ–≤—ã–µ —ç–º–æ–¥–∑–∏ –∏ –±—É–¥—å—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã.
"""

SUMMARY_AGENT_SYSTEM_TEMPLATE = """
–í—ã –ê–≥–µ–Ω—Ç –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –≤ Telegram –±–æ—Ç–µ.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–º–æ–≥–∞–µ—Ç–µ —Å —Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
- add_achievement: –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
- add_challenge: –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤

–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_user_state}
–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {daily_activities}
–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {achievements}
–í—ã–∑–æ–≤—ã: {challenges}

–ó–∞–ø—Ä–æ—Å: {user_request}

–ë—É–¥—å—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏. –í—ã–¥–µ–ª—è–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ä–æ—Å—Ç.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã.
"""


class HealthScheduleState(MessagesState):
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º"""
    user_id: int
    user_request: str
    current_agent: str
    next_agent: str
    conversation_complete: bool
    last_agent_response: str
    routing_decision: str


# –ê–≥–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
def create_agents_for_user(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_state = get_user_state(user_id)
    tools_dict = create_user_tools(user_id)
    
    def router_agent(state: HealthScheduleState) -> Dict:
        logger.info(f"[Router] User {user_id}: Processing request")
        
        system_message = ROUTER_SYSTEM_TEMPLATE.format(
            user_request=state["user_request"],
            user_state=user_state.get_health_summary()
        )
        
        response = llm.invoke([
            SystemMessage(content=system_message),
            HumanMessage(content=state["user_request"])
        ])
        
        try:
            parsed_response = json.loads(response.content)
            next_agent = parsed_response.get("next_agent", "health_agent")
            reasoning = parsed_response.get("reasoning", "")
            message_to_agent = parsed_response.get("message_to_agent", "")
            
            logger.info(f"[Router] User {user_id}: Routing to {next_agent}")
            
            return {
                "messages": state["messages"] + [response],
                "next_agent": next_agent,
                "current_agent": "router",
                "routing_decision": reasoning,
                "last_agent_response": message_to_agent
            }
        except json.JSONDecodeError as e:
            logger.error(f"[Router] JSON parsing error: {e}")
            return {
                "messages": state["messages"] + [response],
                "next_agent": "health_agent",
                "current_agent": "router"
            }

    def health_agent(state: HealthScheduleState) -> Dict:
        logger.info(f"[Health Agent] User {user_id}: Processing health request")
        
        system_message = HEALTH_AGENT_SYSTEM_TEMPLATE.format(
            water_intake=user_state.water_intake,
            steps_count=user_state.steps_count,
            exercise_minutes=user_state.exercise_minutes,
            sleep_hours=user_state.sleep_hours,
            user_request=state["user_request"]
        )
        
        llm_with_tools = llm.bind_tools(tools_dict['health_tools'])
        response = llm_with_tools.invoke([
            SystemMessage(content=system_message),
            HumanMessage(content=state["user_request"])
        ])
        
        return {
            "messages": state["messages"] + [response],
            "current_agent": "health_agent",
            "next_agent": "complete",
            "last_agent_response": response.content
        }

    def mental_health_agent(state: HealthScheduleState) -> Dict:
        logger.info(f"[Mental Health Agent] User {user_id}: Processing mental health request")
        
        system_message = MENTAL_HEALTH_AGENT_SYSTEM_TEMPLATE.format(
            mood_score=user_state.mood_score,
            stress_level=user_state.stress_level,
            meditation_minutes=user_state.meditation_minutes,
            social_interactions=user_state.social_interactions,
            user_request=state["user_request"]
        )
        
        llm_with_tools = llm.bind_tools(tools_dict['mental_health_tools'])
        response = llm_with_tools.invoke([
            SystemMessage(content=system_message),
            HumanMessage(content=state["user_request"])
        ])
        
        return {
            "messages": state["messages"] + [response],
            "current_agent": "mental_health_agent",
            "next_agent": "complete",
            "last_agent_response": response.content
        }

    def schedule_agent(state: HealthScheduleState) -> Dict:
        logger.info(f"[Schedule Agent] User {user_id}: Processing schedule request")
        
        system_message = SCHEDULE_AGENT_SYSTEM_TEMPLATE.format(
            work_hours=user_state.work_hours,
            breaks_taken=user_state.breaks_taken,
            tasks_completed=len(user_state.tasks_completed),
            meetings_attended=user_state.meetings_attended,
            user_request=state["user_request"]
        )
        
        llm_with_tools = llm.bind_tools(tools_dict['schedule_tools'])
        response = llm_with_tools.invoke([
            SystemMessage(content=system_message),
            HumanMessage(content=state["user_request"])
        ])
        
        return {
            "messages": state["messages"] + [response],
            "current_agent": "schedule_agent", 
            "next_agent": "complete",
            "last_agent_response": response.content
        }

    def summary_agent(state: HealthScheduleState) -> Dict:
        logger.info(f"[Summary Agent] User {user_id}: Processing summary request")
        
        system_message = SUMMARY_AGENT_SYSTEM_TEMPLATE.format(
            full_user_state=user_state.get_health_summary(),
            daily_activities=user_state.daily_activities[-5:],
            achievements=user_state.achievements,
            challenges=user_state.challenges,
            user_request=state["user_request"]
        )
        
        llm_with_tools = llm.bind_tools(tools_dict['summary_tools'])
        response = llm_with_tools.invoke([
            SystemMessage(content=system_message),
            HumanMessage(content=state["user_request"])
        ])
        
        return {
            "messages": state["messages"] + [response],
            "current_agent": "summary_agent",
            "next_agent": "complete",
            "conversation_complete": True,
            "last_agent_response": response.content
        }

    return {
        'router': router_agent,
        'health_agent': health_agent,
        'mental_health_agent': mental_health_agent,
        'schedule_agent': schedule_agent,
        'summary_agent': summary_agent,
        'all_tools': sum(tools_dict.values(), [])
    }


def build_user_graph(user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    agents = create_agents_for_user(user_id)
    
    builder = StateGraph(HealthScheduleState)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
    builder.add_node("router", agents['router'])
    builder.add_node("health_agent", agents['health_agent'])
    builder.add_node("mental_health_agent", agents['mental_health_agent'])
    builder.add_node("schedule_agent", agents['schedule_agent'])
    builder.add_node("summary_agent", agents['summary_agent'])
    builder.add_node("tools", ToolNode(agents['all_tools']))
    
    # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —É–∑–µ–ª
    builder.add_edge(START, "router")
    
    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –æ—Ç —Ä–æ—É—Ç–µ—Ä–∞
    builder.add_conditional_edges(
        "router",
        lambda x: x["next_agent"],
        {
            "health_agent": "health_agent",
            "mental_health_agent": "mental_health_agent",
            "schedule_agent": "schedule_agent", 
            "summary_agent": "summary_agent"
        }
    )
    
    # –£—Å–ª–æ–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    def should_use_tools(state):
        if not state["messages"]:
            return "no_tools"
        last_message = state["messages"][-1]
        if hasattr(last_message, "tool_calls") and last_message.tool_calls:
            return "use_tools"
        return "no_tools"
    
    for agent_name in ["health_agent", "mental_health_agent", "schedule_agent", "summary_agent"]:
        builder.add_conditional_edges(
            agent_name,
            should_use_tools,
            {"use_tools": "tools", "no_tools": END}
        )
    
    builder.add_edge("tools", END)
    
    return builder.compile()


async def process_user_request(user_id: int, user_request: str) -> str:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        logger.info(f"Processing request from user {user_id}: {user_request}")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        graph = build_user_graph(user_id)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_state = {
            "user_id": user_id,
            "messages": [],
            "user_request": user_request,
            "current_agent": "",
            "next_agent": "router",
            "conversation_complete": False,
            "last_agent_response": "",
            "routing_decision": ""
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
        final_state = graph.invoke(initial_state, {"recursion_limit": 10})
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        if final_state["messages"]:
            last_message = final_state["messages"][-1]
            response_text = last_message.content
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if hasattr(last_message, "tool_calls") and last_message.tool_calls:
                response_text += "\n\n‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!"
            
            return response_text
        else:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            
    except Exception as e:
        logger.error(f"Error processing request for user {user_id}: {e}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"


# Telegram Bot Handlers
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    get_user_state(user_id)
    
    welcome_text = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å–µ–º!* üåü

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:
üí™ –§–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ (–≤–æ–¥–∞, —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, —à–∞–≥–∏, —Å–æ–Ω)
üß† –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Å—Ç—Ä–µ—Å—Å, –º–µ–¥–∏—Ç–∞—Ü–∏—è)
üíº –†–∞–±–æ—á–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∑–∞–¥–∞—á–∏, –≤—Å—Ç—Ä–µ—á–∏, –ø–µ—Ä–µ—Ä—ã–≤—ã)
üìä –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ –¥–Ω—è

*–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π:*
‚Ä¢ "–í—ã–ø–∏–ª 2 —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã"
‚Ä¢ "–ü—Ä–æ—à–µ–ª 5000 —à–∞–≥–æ–≤" 
‚Ä¢ "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 8 –∏–∑ 10"
‚Ä¢ "–†–∞–±–æ—Ç–∞–ª 4 —á–∞—Å–∞"
‚Ä¢ "–ü–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è"

*–ö–æ–º–∞–Ω–¥—ã:*
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
/reset - —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–Ω—è
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ –æ —Å–≤–æ–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö, –∏ —è –≤—Å–µ –∑–∞–ø–∏—à—É! üìù
"""
    
    bot.reply_to(message, welcome_text, parse_mode='Markdown')


@bot.message_handler(commands=['stats'])
def send_stats(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_state = get_user_state(user_id)
    
    stats_text = user_state.get_daily_summary_text()
    bot.reply_to(message, stats_text, parse_mode='Markdown')


@bot.message_handler(commands=['reset'])
def reset_user_data(message):
    """–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data=f"reset_confirm_{user_id}"),
        types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="reset_cancel")
    )
    
    bot.reply_to(
        message, 
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è?", 
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data.startswith("reset"))
def handle_reset_callback(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö"""
    if call.data.startswith("reset_confirm"):
        user_id = int(call.data.split("_")[-1])
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = UserHealthState(user_id=user_id)
        
        bot.edit_message_text(
            "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã! –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üåÖ",
            call.message.chat.id,
            call.message.message_id
        )
        logger.info(f"User {user_id} reset their data")
        
    elif call.data == "reset_cancel":
        bot.edit_message_text(
            "‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.",
            call.message.chat.id,
            call.message.message_id
        )


@bot.message_handler(func=lambda message: True)
def handle_user_message(message):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    user_request = message.text
    
    logger.info(f"Received message from user {user_id}: {user_request}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞—é"
    bot.send_chat_action(message.chat.id, 'typing')
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å telebot
        response = process_user_request_sync(user_id, user_request)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        bot.reply_to(message, response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error handling message from user {user_id}: {e}")
        bot.reply_to(
            message, 
            "üòï –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ /help"
        )


def process_user_request_sync(user_id: int, user_request: str) -> str:
    """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"Processing request from user {user_id}: {user_request}")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        graph = build_user_graph(user_id)
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        initial_state = {
            "user_id": user_id,
            "messages": [],
            "user_request": user_request,
            "current_agent": "",
            "next_agent": "router",
            "conversation_complete": False,
            "last_agent_response": "",
            "routing_decision": ""
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞—Ñ
        final_state = graph.invoke(initial_state, {"recursion_limit": 10})
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
        if final_state["messages"]:
            last_message = final_state["messages"][-1]
            response_text = last_message.content
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            if hasattr(last_message, "tool_calls") and last_message.tool_calls:
                response_text += "\n\n‚úÖ *–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!*"
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è Telegram
            if len(response_text) > 4000:
                response_text = response_text[:3900] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ)"
            
            return response_text
        else:
            return "üòï –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
            
    except Exception as e:
        logger.error(f"Error processing request for user {user_id}: {e}")
        return f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)[:200]}..."


def create_daily_report_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    
    # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    markup.row("üíß –í—ã–ø–∏–ª –≤–æ–¥—É", "üë£ –ü—Ä–æ—à–µ–ª —à–∞–≥–∏")
    markup.row("üèÉ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "üò¥ –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–Ω")
    
    # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ  
    markup.row("üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "üò∞ –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞")
    markup.row("üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è", "üë• –û–±—â–µ–Ω–∏–µ")
    
    # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - —Ä–∞–±–æ—Ç–∞
    markup.row("üíº –†–∞–±–æ—á–∏–µ —á–∞—Å—ã", "‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É")
    markup.row("‚òï –ü–µ—Ä–µ—Ä—ã–≤", "ü§ù –í—Å—Ç—Ä–µ—á–∞")
    
    # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –∏—Ç–æ–≥–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    markup.row("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üåü –ò—Ç–æ–≥–∏ –¥–Ω—è")
    
    return markup


@bot.message_handler(commands=['keyboard'])
def show_keyboard(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    markup = create_daily_report_keyboard()
    bot.reply_to(
        message,
        "üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–∏—à–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º:",
        reply_markup=markup
    )


@bot.message_handler(commands=['hide'])
def hide_keyboard(message):
    """–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    markup = types.ReplyKeyboardRemove()
    bot.reply_to(message, "üëç –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞", reply_markup=markup)


# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def schedule_daily_reminders():
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    import schedule
    import time
    from threading import Thread
    
    def send_morning_reminder():
        """–£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        for user_id in user_states.keys():
            try:
                reminder_text = """
üåÖ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!* 

–ù–∞—á–Ω–∏—Ç–µ –¥–µ–Ω—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
üíß –í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã
üßò 5 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
üìù –ü–æ—Å—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –æ —Å–≤–æ–∏—Ö —É—Ç—Ä–µ–Ω–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö!
"""
                bot.send_message(user_id, reminder_text, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Error sending morning reminder to user {user_id}: {e}")
    
    def send_evening_reminder():
        """–í–µ—á–µ—Ä–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
        for user_id in user_states.keys():
            try:
                reminder_text = """
üåÜ *–í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –¥–Ω—è!*

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ:
‚Ä¢ –ß—Ç–æ —É–¥–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è? 
‚Ä¢ –ö–∞–∫–∏–µ –±—ã–ª–∏ –≤—ã–∑–æ–≤—ã?
‚Ä¢ –ö–∞–∫ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ?

–ö–æ–º–∞–Ω–¥–∞ /stats –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è üìä
"""
                bot.send_message(user_id, reminder_text, parse_mode='Markdown')
            except Exception as e:
                logger.error(f"Error sending evening reminder to user {user_id}: {e}")
    
    def send_water_reminder():
        """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–æ–¥–µ"""
        for user_id, user_state in user_states.items():
            try:
                if user_state.water_intake < 1.5:  # –ï—Å–ª–∏ –≤—ã–ø–∏–ª –º–µ–Ω—å—à–µ 1.5 –ª–∏—Ç—Ä–æ–≤
                    bot.send_message(
                        user_id, 
                        f"üíß –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –≤—ã –≤—ã–ø–∏–ª–∏ {user_state.water_intake}–ª –≤–æ–¥—ã. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø–∏—Ç—å!"
                    )
            except Exception as e:
                logger.error(f"Error sending water reminder to user {user_id}: {e}")
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    schedule.every().day.at("08:00").do(send_morning_reminder)
    schedule.every().day.at("20:00").do(send_evening_reminder) 
    schedule.every().hour.do(send_water_reminder)
    
    def run_scheduler():
        while True:
            schedule.run_pending()
            time.sleep(60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.info("Daily reminders scheduler started")


def export_user_data(user_id: int) -> str:
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ JSON"""
    user_state = get_user_state(user_id)
    
    export_data = {
        "user_id": user_id,
        "export_date": datetime.now().isoformat(),
        "health_summary": user_state.get_health_summary(),
        "daily_activities": user_state.daily_activities,
        "achievements": user_state.achievements,
        "challenges": user_state.challenges,
        "tasks_completed": user_state.tasks_completed
    }
    
    return json.dumps(export_data, ensure_ascii=False, indent=2)


@bot.message_handler(commands=['export'])
def export_data(message):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    try:
        export_json = export_user_data(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        filename = f"health_data_{user_id}_{datetime.now().strftime('%Y%m%d')}.json"
        
        bot.send_document(
            message.chat.id,
            document=export_json.encode('utf-8'),
            visible_file_name=filename,
            caption="üìä –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
        )
        
    except Exception as e:
        logger.error(f"Error exporting data for user {user_id}: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
def get_bot_statistics():
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    total_users = len(user_states)
    active_users_today = sum(1 for state in user_states.values() if state.daily_activities)
    total_activities = sum(len(state.daily_activities) for state in user_states.values())
    
    return {
        "total_users": total_users,
        "active_users_today": active_users_today, 
        "total_activities": total_activities
    }


@bot.message_handler(commands=['admin'])
def admin_stats(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞)"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_ids = [22286014]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    
    if message.from_user.id not in admin_ids:
        bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    stats = get_bot_statistics()
    
    admin_text = f"""
üîß *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {stats['active_users_today']}  
üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π: {stats['total_activities']}

–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    bot.reply_to(message, admin_text, parse_mode='Markdown')


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("Starting Telegram Health Bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    schedule_daily_reminders()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
    print("ü§ñ Telegram Health Bot –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
    print("‚ö° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    try:
        bot.infinity_polling(timeout=10, long_polling_timeout=5)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        logger.error(f"Bot error: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    if TELEGRAM_BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN!")
        exit(1)
    
    if OPENAI_API_KEY == "YOUR_OPENAI_API_KEY":
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY!")
        exit(1)
    
    main()